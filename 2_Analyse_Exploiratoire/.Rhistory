data_Steam = read.csv2(".\\games.csv", encoding = "UTF-8")
data_Steam = read.csv2(".\\games.csv", encoding = "UTF-8")
library(ggplot2)
data_Steam$revenue = as.numeric(data_Steam$revenue)
data_Steam$avgPlaytime = as.numeric(data_Steam$avgPlaytime)
hist(data_Steam$revenue)
data_Steam$revenue = as.numeric(data_Steam$revenue)
data_Steam$avgPlaytime = as.numeric(data_Steam$avgPlaytime)
data_Steam$revenue = as.numeric(data_Steam$revenue)
data_Steam$avgPlaytime = as.numeric(data_Steam$avgPlaytime)
data_Steam$price = as.numeric(data_Steam$price)
hist(data_Steam$price)
data_Steam$revenue = as.numeric(data_Steam$revenue)
data_Steam$avgPlaytime = as.numeric(data_Steam$avgPlaytime)
data_Steam$price = as.numeric(data_Steam$price)
hist(data_Steam$releaseYear)
table(data_Steam$releaseMonth)
barplot(height = table(data_Steam$releaseMonth))
summary(data_Steam)
#summary(subset(data_Steam, subset=data_Steam$copiesSold >= 567 & data_Steam$revenue > 680 & data_Steam$price > 10))
data_test1 <- subset(data_Steam, subset = data_Steam$copiesSold > 567 & data_Steam$revenue > 9816)
summary(data_test1)
data_test2 <- subset(data_test1, subset = data_test1$reviewScore >= 80 & data_test1$price >= 10 & data_test1$releaseYear >= 2023)
summary(data_test2)
#data_test3 <- subset(data_test2, subset = data_test2$revenue >= 18023)
#summary(data_test3)
library(dplyr)
library(ggplot2)
data_link_games_genres = read.csv2("link_games_genres.csv", encoding="UTF-8")
data_link_games_genres = read.csv2("link_games_genres.csv", encoding="UTF-8")
data_genres = read.csv2("genres.csv", encoding = "UTF-8")
data_temp01 = inner_join(data_link_games_genres, data_test1,by="AppID")
data_temp02 = inner_join(data_temp01, data_genres, by="GenresId")
hist(x = data_temp01$releaseYear)
# creation de la colonne year
table(data_temp02$releaseYear)
test_graph01 = ggplot(data = data_temp02, aes(x = data_temp02$releaseYear, y=data_temp02$copiesSold, group = data_temp02$Genres))+
geom_point(aes(color = data_temp02$Genres))
test_graph01
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$Genres == "Action" & data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$avgPlaytime, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph03 = subset(x = data_temp02, subset=data_temp02$Genres == "Action"& data_temp02$recommandations < max(data_temp02$recommandations))
test_graph03 = ggplot(data_test_graph03, aes(x = data_test_graph03$copiesSold, y=data_test_graph03$recommandations))+
geom_point(aes(color = data_test_graph03$publisherClass))
test_graph03
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$copiesSold, y=data_test_graph02$revenue))+
geom_point(aes(color = data_test_graph02$reviewScore, shape = data_test_graph02$Genres))
test_graph02
data_test_graph02 = data_temp02
test_graph02 = ggplot(data_genres, aes(x = data_genres$numberOfGames, y=data_genres$totalRevenue))+
geom_point(aes(size = data_genres$averagePlayTime))
test_graph02
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$PEGI, y=data_test_graph02$copiesSold, group = data_test_graph02$Genres))+
geom_line(aes(color = data_test_graph02$Genres))
test_graph02
data_test_graph02 = data_temp02
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$PEGI, y=data_test_graph02$revenue))+
geom_point(aes(color = data_test_graph02$Genres))
test_graph02
View(data_Steam)
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$Genres == "Action" & data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$avgPlaytime, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$Genres == "Action" & data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$avgPlaytime, y=data_test_graph02$copiesSold))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$Genres == "Action" & data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$copiesSold, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$Genres == "Action" & data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$revenue, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$Genres == "Action" & data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$price, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph02 = subset(x = data_temp02, subset=data_temp02$Genres == "Action" & data_temp02$recommandations < max(data_temp02$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$notes, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph03 = subset(x = data_temp02, subset=data_temp02$Genres == "Action"& data_temp02$recommandations < max(data_temp02$recommandations))
test_graph03 = ggplot(data_test_graph03, aes(x = data_test_graph03$avgPlaytime, y=data_test_graph03$reviewScore))+
geom_point(aes(color = data_test_graph03$publisherClass))
test_graph03
data_test_graph03 = subset(x = data_temp02, subset=data_temp02$Genres == "Action"& data_temp02$recommandations < max(data_temp02$recommandations))
test_graph03 = ggplot(data_test_graph03, aes(x = data_test_graph03$reviewScore, y=data_test_graph03$recommandations))+
geom_point(aes(color = data_test_graph03$publisherClass))
test_graph03
## Import des packages
library(DBI)
library(ggplot2)
library(cluster)
library(fdm2id)
# Connect to the MySQL database: con
connexion <- DBI::dbConnect(RMySQL::MySQL(),
# A modifier - verifier nom DB.
dbname = "e1735u_Projet_Steam_Doctrine",
host = "devbdd.iutmetz.univ-lorraine.fr",
port = 3306,
user = "e1735u_appli",
password = "32313706")
# # Get table names
tables <- dbListTables(connexion)
# Display structure of tables
str(tables)
# Import the accounts table from mydb
games <- dbReadTable(connexion, "games")
data_games = as.data.frame(games)
data_games.pca = PCA(data_games[,c(15:19,21)])
# enregistrement des graphes de l'ACP :
# - cercles des corr?lations
# - projection sur le premier plan factoriel
# - renvoyer aussi l'inertie totale du premier plan factoriel
graphe_ACP_cercle_cor = plot(data_games.pca, type = "cor")
ggsave("graphe_ACP_cercle_cor.png", plot=graphe_ACP_cercle_cor)
graphe_ACP_projection_points = plot(data_games.pca)
ggsave("graphe_ACP_projection_points.png", plot=graphe_ACP_projection_points)
# inertie
inertie_premier_plan_factoriel = data_games.pca$eig[2,3]
# d?termination du nombre de cluster optimal
nb_cluster_opti = fdm2id::kmeans.getk(data_games.pca$ind$coor)
# application du kmeans
data_games_ACP_kmeans = fdm2id::KMEANS(data_games.pca$ind$coord, k=nb_cluster_opti)
# dÃ©termination du nombre de cluster optimal
nb_cluster_opti = fdm2id::kmeans.getk(data_games.pca$ind$coor)
# application du kmeans
data_games_ACP_kmeans = fdm2id::KMEANS(data_games.pca$ind$coord, k=nb_cluster_opti)
# creation d'un dataframe vide pour accueillir les donn?es de la table games
# avec leur nouvelle var d?signant leur cluster associ?.
data_games_clust = data.frame(Dim1=numeric(), Dim2=numeric(), Dim3=numeric(), Dim4=numeric(), Dim5=numeric(), Dim6=numeric(), cluster=factor())
for (i in 1:nb_cluster_opti) {
# r?cuperation de tous les index de la table de donn?es du premier cluster
index_data_clust = as.vector(which(data_games_ACP_kmeans$cluster == i))
# extraction des donn?es ? partir de l'index et de la table originale.
data_games_clust_temp = as.data.frame(data_games.pca$ind$coord[index_data_clust,])
# ajout de la colonne associ?e au cluster
data_games_clust_temp[, "cluster"] = i
# fusion avec le dataset de resultat.
data_games_clust = rbind(data_games_clust, data_games_clust_temp)
}
data_games.pca$ind$coord=as.matrix(data_games_clust)
data_games_clust =data_games_clust[,c(1,2,7)]
library(plotly)
fig <- plot_ly(data_games_clust, x = ~Dim.1, y = ~Dim.2, color = ~cluster, colors = c('#636EFA','#EF553B'), type = 'scatter', mode = 'markers') %>%
layout(
legend=list(title=list(text='color')),
plot_bgcolor = "#e5ecf6",
xaxis = list(
title = "0"),
yaxis = list(
title = "1"))
for (i in 1:nrow(data_games.pca$var$coord)){
fig <- fig %>%
add_segments(x = 0, xend = 30*data_games.pca$var$coord[i,"Dim.1"], y = 0, yend = 30*data_games.pca$var$coord[i,"Dim.2"], line = list(color = 'black'),inherit = FALSE, showlegend = FALSE) %>%
add_annotations(x=30*data_games.pca$var$coord[i,"Dim.1"], y=30*data_games.pca$var$coord[i,"Dim.2"], ax = 0, ay = 0,text = rownames(data_games.pca$var$coord)[i], xanchor = 'center', yanchor= 'bottom')
}
fig
# Sauvegarde du plot
plotly_IMAGE(fig, format = "png", out_file = "graphe_cluster_projection_acp.png")
ggsave("graphe_cluster_projection_acp_bis.png", plot=fig)
# Sauvegarde du plot
plotly_IMAGE(fig, format = "png", out_file = "graphe_cluster_projection_acp.png")
orca(fig, "graphe_cluster_projection_acp.png")
kaleido(fig, "graphe_cluster_projection_acp.png")
install.packages("htmlwidgets")
library(htmlwidgets)
htmlwidgets::saveWidget(as_widget(fig), "graphe_cluster_projection_acp.png.html")
library(ggplot2)
library(dplyr)
library(fdm2id)
data = read.csv2(".\\data_view\\games.csv", encoding = "UTF-8")
library(ggplot2)
library(dplyr)
library(fdm2id)
data = read.csv2(".\\data_view\\games.csv", encoding = "UTF-8")
data$revenue = as.numeric(data$revenue)
data$avgPlaytime = as.numeric(data$avgPlaytime)
data$price = as.numeric(data$price)
hist(data$releaseYear)
barplot(height = table(data$releaseMonth))
summary(data)
data_games_macro <- subset(data, subset = data$copiesSold > 567 & data$revenue > 9816)
summary(data_games_macro)
data_game_micro <- subset(data_games_macro, subset = data_games_macro$reviewScore >= 80 & data_games_macro$price >= 10 & data_games_macro$releaseYear >= 2023)
summary(data_game_micro)
#data_test3 <- subset(data_game_micro, subset = data_game_micro$revenue >= 18023)
#summary(data_test3)
data_link_games_genres = read.csv2(".\\data_view\\link_games_genres.csv", encoding="UTF-8")
data_genres = read.csv2(".\\data_view\\genres.csv", encoding = "UTF-8")
data_macro_genre = inner_join(data_link_games_genres, data_games_macro,by="AppID")
data_macro_genre = inner_join(data_macro_genre, data_genres, by="GenresId")
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$Genres == "Action" & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$avgPlaytime, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$reviewScore, y=data_test_graph02$avgPlaytime))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
model = LINREG(data_macro_genre$reviewScore, data_macro_genre$avgPlaytime)
regplot(model, data_macro_genre$reviewScore, data_macro_genre$avgPlaytime)
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$publisherClass=="AA      " & data_macro_genre$Genres == "Action" & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$reviewScore, y=data_test_graph02$price))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
test_graph02
View(test_graph02)
library(ggplot2)
library(dplyr)
library(fdm2id)
data = read.csv2(".\\data_view\\games.csv", encoding = "UTF-8")
data$revenue = as.numeric(data$revenue)
data$avgPlaytime = as.numeric(data$avgPlaytime)
data$price = as.numeric(data$price)
hist(data$releaseYear)
barplot(height = table(data$releaseMonth))
summary(data)
data_games_macro <- subset(data, subset = data$copiesSold > 567 & data$revenue > 9816)
summary(data_games_macro)
data_game_micro <- subset(data_games_macro, subset = data_games_macro$reviewScore >= 80 & data_games_macro$price >= 10 & data_games_macro$releaseYear >= 2023)
summary(data_game_micro)
#data_test3 <- subset(data_game_micro, subset = data_game_micro$revenue >= 18023)
#summary(data_test3)
data_link_games_genres = read.csv2(".\\data_view\\link_games_genres.csv", encoding="UTF-8")
data_genres = read.csv2(".\\data_view\\genres.csv", encoding = "UTF-8")
data_macro_genre = inner_join(data_link_games_genres, data_games_macro,by="AppID")
data_macro_genre = inner_join(data_macro_genre, data_genres, by="GenresId")
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$Genres == "Action" & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$avgPlaytime, y=data_test_graph02$recommandations))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$reviewScore, y=data_test_graph02$avgPlaytime))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
model = LINREG(data_macro_genre$reviewScore, data_macro_genre$avgPlaytime)
regplot(model, data_macro_genre$reviewScore, data_macro_genre$avgPlaytime)
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$publisherClass=="AA      " & data_macro_genre$Genres == "Action" & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$reviewScore, y=data_test_graph02$price))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
data_test_graph03 = subset(x = data_macro_genre,data_macro_genre$publisherClass=="AAA     " & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph03 = ggplot(data_test_graph03, aes(x = data_test_graph03$reviewScore, y=data_test_graph03$recommandations))+
geom_point(aes(color = data_test_graph03$publisherClass))
test_graph03
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$copiesSold, y=data_test_graph02$revenue))+
geom_point(aes(color = data_test_graph02$reviewScore, shape = data_test_graph02$publisherClass))
test_graph02
test_graph02
data_test_graph01 = subset(x = data_macro_genre, subset=data_macro_genre$Genres == "Action" & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph01 = ggplot(data_test_graph01, aes(x = data_test_graph01$avgPlaytime, y=data_test_graph01$recommandations))+
geom_point(aes(color = data_test_graph01$publisherClass))
test_graph01
test_graph01
data_test_graph03 = subset(x = data_macro_genre, subset=data_macro_genre$publisherClass=="AA      " & data_macro_genre$Genres == "Action" & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph03 = ggplot(data_test_graph03, aes(x = data_test_graph03$reviewScore, y=data_test_graph03$price))+
geom_point(aes(color = data_test_graph03$publisherClass))
test_graph03
test_graph03
data_test_graph04 = subset(x = data_macro_genre,data_macro_genre$publisherClass=="AAA     " & data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph04 = ggplot(data_test_graph04, aes(x = data_test_graph04$reviewScore, y=data_test_graph04$recommandations))+
geom_point(aes(color = data_test_graph04$publisherClass))
test_graph04
test_graph04
data_test_graph05 = subset(x = data_macro_genre, subset=data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph05 = ggplot(data_test_graph05, aes(x = data_test_graph05$copiesSold, y=data_test_graph05$revenue))+
geom_point(aes(color = data_test_graph05$reviewScore, shape = data_test_graph05$publisherClass))
test_graph05
test_graph05
test_graph04
test_graph03
test_graph02
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$reviewScore, y=data_test_graph02$avgPlaytime))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02
test_graph02
data_test_graph02 = subset(x = data_macro_genre, subset=data_macro_genre$recommandations < max(data_macro_genre$recommandations))
test_graph02 = ggplot(data_test_graph02, aes(x = data_test_graph02$reviewScore, y=data_test_graph02$avgPlaytime))+
geom_point(aes(color = data_test_graph02$publisherClass))
test_graph02_bis = ggplot(data_macro_genre, aes(x = data_macro_genre$reviewScore, y=data_macro_genre$avgPlaytime))+
geom_point(aes(color = data_macro_genre$publisherClass))
test_graph02
test_graph02_bis
test_graph04
Sys.getenv(c("R_HOME", "R_PAPERSIZE", "R_PRINTCMD", "HOST"))
names(s <- Sys.getenv()) # all settings (the values could be very long)
head(s, 12)# using the Dlist print() method
## Language and Locale settings -- but rather use Sys.getlocale()
s[grep("^L(C|ANG)", names(s))]
test = Sys.getenv("R_HOME")
test
## Initialisation du dossier d'output a partir de la var
# d'environement passee en parametre depuis le script Symfony
# exemple d'utilisation :
# test = Sys.getenv("R_HOME")
# test
output_dir = Sys.getenv("OUTPUT_DIRECTORY")
output_dir
Sys.getenv()
# set the output dir
setOutputDir(output_dir)
install.packages("rrepast")
rrepast
library(rrepast)
# set the output dir
setOutputDir(output_dir)
install.packages(envDocument)
install.packages("envDocument")
library(envDocument)
script_path <- get_scriptpath()
print(script_path)
?get_scriptpath
getcwd()
getwd()
getwd()
# DÃ©router la sortie standard vers le fichier
sink("test_R.txt")
# Ãcrire du texte dans le fichier
print(getwd())
# Remettre la sortie standard Ã  son emplacement initial
sink()
# Clusterisation
myclust <- hclust(dist(data_macro_genre$price, method = "euclidean"), method = "ward.D2")
# Calcul de l'inertie (les hauteurs des fusions dans le clustering)
inertie <- sort(myclust$height, decreasing = TRUE)
# Calcul des diffÃ©rences d'inertie entre chaque fusion
diff_inertie <- diff(inertie)
# Trouver la plus grande diffÃ©rence (le "saut" le plus important dans l'inertie)
# On travaille sur les intervalles 2 Ã  4 car on envisage 3 Ã  5 catÃ©gories
optimal_clusters <- which.min(diff_inertie[2:4]) + 2  # Ajouter 1 car l'indice renvoie au point avant la coupure
Sys.getenv()
file.path(origin = "current")
file.path(origin = "current")
file.path()
?file.path
file.path(origin = "current")
# Remettre la sortie standard Ã  son emplacement initial
#sink()
file.path(origin = "current")
# Remettre la sortie standard Ã  son emplacement initial
#sink()
a = file.path(origin = "current")
rstudioapi::getActiveDocumentContext()
install.packages(rstudioapi)
install.packages("rstudioapi")
library(rstudioapi)
rstudioapi::getActiveDocumentContext()
a = rstudioapi::getActiveDocumentContext()
a = rstudioapi::getActiveDocumentContext()$path
current_file <- getActiveDocumentContext()$path
# Convertir le chemin relatif en un chemin absolu
absolute_path <- normalizePath(current_file, mustWork = TRUE)
# Afficher le chemin absolu
print(absolute_path)
# Obtenir les arguments de la commande
args <- commandArgs(trailingOnly = FALSE)
# Extraire le chemin du fichier
script_path <- sub("--file=", "", args[grep("--file=", args)])
# Convertir le chemin en absolu (si nÃ©cessaire)
absolute_path <- normalizePath(script_path, mustWork = TRUE)
# Afficher le chemin absolu
print(absolute_path)
# Obtenir les arguments de la commande
#args <- commandArgs(trailingOnly = TRUE)
commandArgs(trailingOnly = TRUE)
# Obtenir les arguments de la commande
#args <- commandArgs(trailingOnly = TRUE)
commandArgs(trailingOnly = FALSE)
# Obtenir les arguments de la commande
args <- commandArgs(trailingOnly = FALSE)
# Extraire le chemin du fichier
script_path <- sub("--file=", "", args[grep("--file=", args)])
# Convertir le chemin en absolu (si nÃ©cessaire)
absolute_path <- normalizePath(script_path, mustWork = TRUE)
library(stringr)
absolute_path_dir = str_replace(absolute_path, "\\\\[a-zA-Z_]+.R$", "")
# Afficher le chemin absolu
print(absolute_path_dir)
setwd(absolute_path_dir)
if (absolute_path_dir !="") {
setwd(absolute_path_dir)
}
tryCatch(
setwd(absolute_path_dir),
error = function(e) {
print("test")
},
)
tryCatch(
setwd(absolute_path_dir),
error = function() {
print("test")
},
)
tryCatch(
setwd(absolute_path_dir),
error = function() {
print("test")
},
)
tryCatch(
setwd(absolute_path_dir),
error = function(e) {
print("test")
}
)
?dbListTables
?PCA
find_program("pandoc")
rmarkdown:::find_pandoc()
install.packages(c("clue", "curl"))
?saveWidget
?as_widget
??as_widget
?saveWidget
install.packages("pandoc")
